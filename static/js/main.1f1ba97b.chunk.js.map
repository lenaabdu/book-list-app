{"version":3,"sources":["add.js","view.js","apiClient.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","state","disabled","e","result","preventDefault","this","setState","currentbook","client","updatebook","id","target","title","value","author","read","uri","console","log","addbook","alue","then","document","getElementById","reset","refreshList","catch","alert","Form","onSubmit","submitHandler","Control","name","type","defaultValue","Button","variant","React","Component","View","books","undefined","getbooks","response","data","removebook","book","map","current","key","href","className","onClick","Table","striped","bordered","hover","buildRows","url","ApiClient","method","axios","apiCall","App","listbooks","token","logout","listContents","localStorage","getItem","JSON","parse","listbook","concat","setItem","stringify","Row","Col","sm","path","mdiBookOpenPageVariant","size","color","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1f1ba97b.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nclass Add extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      disabled: false\n    }\n  }\n\n  submitHandler(e) {\n    e.preventDefault()\n    this.setState({ disabled: true })\n    let result\n    if (this.props.currentbook) {\n      result = this.props.client.updatebook(this.props.currentbook.id, e.target.title.value,  e.target.author.value, e.target.read.value ,e.target.uri.value)\n      console.log(result)\n    } else {\n      result = this.props.client.addbook( e.target.title.value,  e.target.author.alue, e.target.read.value,e.target.uri.value)\n    }\n    result.then(() => {\n      this.setState({ disabled: false })\n      document.getElementById(\"bookForm\").reset()\n      this.props.refreshList()\n    })\n      .catch(() => {\n        alert(\"an error occured, please try again\");\n        this.setState({ disabled: false })\n      })\n  }\n  \n  render() {\n    return (\n      <>\n        <Form id=\"bookForm\" onSubmit={(e) => this.submitHandler(e)} >\n\n         \n            <h5>Title</h5>\n            <Form.Control name=\"title\" type=\"text\" defaultValue={this.props.currentbook?.title} disabled={this.state.disabled}  /><br/>\n            <h5>Author</h5>\n            <Form.Control name=\"author\" type=\"text\" defaultValue={this.props.currentbook?.author} disabled={this.state.disabled}  /><br/>\n            <h5>Read/Not Read</h5>\n            <Form.Control name=\"read\" type=\"text\" defaultValue={this.props.currentbook?.read} disabled={this.state.disabled}  /><br/>\n            <h5>URI</h5>\n            <Form.Control name=\"uri\" type=\"text\" defaultValue={this.props.currentbook?.uri} disabled={this.state.disabled}  /><br/>\n          <Button variant=\"primary\" type=\"submit\" disabled={this.state.disabled}>\n          {this.props.currentbook? \"Update\" : \"Add\"  }\n  </Button>\n  \n        </Form>\n      </>\n    );\n  }\n\n}\nexport default Add;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport Add from './add'\n\nclass View extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      books: [],\n      currentbook: undefined\n    }\n  }\n\n  refreshList() {\n    this.props.client.getbooks()\n      .then((response) => this.setState({ books: response.data }))\n  }\n\n  removebook(id) {\n    this.props.client.removebook(id)\n      .then(this.refreshList())\n  }\n\n  updatebook(book) {\n    this.setState({ currentbook: book })\n  }\n\n  componentDidMount() {\n    this.refreshList()\n  }\n\n  buildRows() {\n    return this.state.books.map((current) => {\n      return (<tr key={current.id}>\n        <td> {current.id}</td>\n        <td>{current.title}</td>\n        <td>{current.author}</td>\n        <td>{current.read? \"Read\":\"Not read\"}</td>\n     <td> <a href=\"url\">{current.uri}</a></td>  \n\n\n        \n        <td>\n          <Button className='mr-2 mb-2' onClick={() => this.updatebook(current)}> update</Button>\n          <Button className='mb-2'variant=\"danger\" onClick={() => this.removebook(current.id)}> remove</Button>\n        </td>\n      </tr>)\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Add client={this.props.client} refreshList={() => {\n          this.refreshList()\n          this.setState({\n            currentbook: undefined\n          })\n        }}\n          currentbook={this.state.currentbook} />\n        <br /><hr /><br />\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Title</th>\n              <th>Author</th>\n              <th>Read/NOT</th>\n              <th>Book Link</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.buildRows()}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default View;\n","import axios from 'axios'\n//const url = 'http://localhost:3004/'\nconst url = 'https://book-list-api.herokuapp.com/'\n\nexport class ApiClient {\n\n    apiCall(method, url, data) {\n        return axios({\n            method,\n            url,\n            data\n        })\n    }\n\n    getbooks() {\n        return this.apiCall('get', `${url}books`)\n    }\n\n    addbook(title, author, read, uri) {\n        return this.apiCall('post', `${url}book/create`, { title, author, read, uri })\n    }\n\n    removebook(id) {\n        return this.apiCall('delete', `${url}book/${id}`)\n    }\n\n    updatebook(id, title, author, read, uri) {\n        return this.apiCall('put', `${url}book/${id}`, { title, author, read, uri })\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport View from './view'\n\nimport Icon from \"@mdi/react\";\nimport { ApiClient } from './apiClient';\nimport { mdiBookOpenPageVariant } from '@mdi/js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      listbooks: []\n    }\n    this.client = new ApiClient(() => this.state.token, () => this.logout())\n  }\n\n  componentDidMount() {\n    const listContents = localStorage.getItem(\"list\");\n    this.setState(\n      { listbooks: JSON.parse(listContents) || [] }\n    )\n  }\n\n\n  updateListbooks(id, title, author,read) {\n    const listbook = { id, title, author,read }\n    this.setState((state) => ({\n      listbooks: state.listbooks.concat(listbook)\n    }), () => localStorage.setItem(\"list\", JSON.stringify(this.state.listbooks)))\n  }\n\n  render() {\n    return (\n      <>\n      <Row>\n        <Col sm={4}></Col>\n        <Col sm={1}>\n       <Icon   path={mdiBookOpenPageVariant} size={5} title=\"Booklist\" color=\"#007bff\" />\n       </Col>\n       <Col>\n       <br/><br/>\n          <h1 sm={2} > My<span className=\"color\">Book</span>List</h1>\n          </Col>\n          <Col sm={4}></Col>\n          </Row>\n          <br/>\n          <br/>\n     \n\n        <Container>\n          <View books={this.state.listbooks} client={this.client} />\n        </Container>\n      </>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}